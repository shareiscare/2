

/*	
	//TheNambiarNumberGenerator
	String mobileNo = input1;
	StringBuilder numbiarNo = new StringBuilder();

	for (int i = 0; i < mobileNo.length(); i++) {
		int firstDigit = Integer.parseInt(String.valueOf(mobileNo.charAt(i)));
		int firstDigitEvenOrOdd = firstDigit % 2 == 0 ? 0 : 1; // even=0; odd=1
		int sum = firstDigit;
		int j = i + 1;

		if (j == mobileNo.length()) {
			numbiarNo.append(firstDigit);
			break;
		}

		while (true) {
			sum += Integer.parseInt(String.valueOf(mobileNo.charAt(j++)));

			if (sum % 2 != firstDigitEvenOrOdd || j >= mobileNo.length()) {
				numbiarNo.append(sum);
				i = j - 1;
				break;
			}
		}
	}
	
	return Integer.parseInt(numbiarNo.toString());
	
	
	
	//	UserIDGeneration
	
	String firstName = input1;
	String lastName = input2;
	int pin = input3;
	int N = input4;
	
	String longerName;
	String smallerName;
	StringBuilder userId = new StringBuilder();
	
	if (firstName.length() > lastName.length()) {
		longerName = firstName;
		smallerName = lastName;
	} else if (firstName.length() < lastName.length())  {
		longerName = lastName;
		smallerName = firstName;
	} else {
		if (firstName.compareTo(lastName) < 1 ) {
			longerName = lastName;
		    smallerName = firstName;
		} else {
			longerName = firstName;
		    smallerName = lastName;
		}
	}
	
	userId.append(smallerName.charAt(smallerName.length() - 1));
	userId.append(longerName);
	
	for (int i = 0; i < userId.length(); i++) {
		if (Character.isUpperCase(userId.charAt(i)))
			userId.setCharAt(i, Character.toLowerCase(userId.charAt(i)));
		else
			userId.setCharAt(i, Character.toUpperCase(userId.charAt(i)));
	}
	
	userId.append(String.valueOf(pin).charAt(N - 1));
	userId.append(String.valueOf(pin).charAt(String.valueOf(pin).length() - N));
	
	return userId.toString();
	
	
	
	
	//	MessageControlledRobotMovement
	
	int X = input1;
	int Y = input2;
	String currentPos = input3;
	String msg = input4;
	
	int currX = Integer.parseInt(currentPos.split("-")[0]);
	int currY = Integer.parseInt(currentPos.split("-")[1]);
	String currD = currentPos.split("-")[2]; // E/W/N/S
	String[] instructions = msg.split(" "); // M L R M M L M ...
	StringBuilder output = new StringBuilder();
	
	System.out.println(Arrays.toString(instructions));
	System.out.println("Curr: " + currX + currY + currD);
	
	for (int i = 0; i < instructions.length; i++) {
		System.out.print(instructions[i] + ":: ");
		if (instructions[i].equals("M")) {
			if (currD.equals("E") && (currX + 1 > X )) {
				output.append("-ER");
				break;
			} 
			if (currD.equals("W") && (currX - 1 < 0 )) {
				output.append("-ER");
				break;
			} 
			if (currD.equals("N") && (currY + 1 > Y )) {
				output.append("-ER");
				break;
			} 
			if (currD.equals("S") && (currY - 1 < 0 )) {
				output.append("-ER");
				break;
			}

			if (currD.equals("E")) currX++;
			else if (currD.equals("W")) currX--;
			else if (currD.equals("N")) currY++;
			else if (currD.equals("S")) currY--;
		} else {
			if (currD.equals("E") && instructions[i].equals("L"))
			    currD = "N";
			else if (currD.equals("E") && instructions[i].equals("R"))
				currD = "S";
			else if (currD.equals("W") && instructions[i].equals("L"))
				currD = "S";
			else if (currD.equals("W") && instructions[i].equals("R"))
				currD = "N";
			else if (currD.equals("N") && instructions[i].equals("L"))
				currD = "W";
			else if (currD.equals("N") && instructions[i].equals("R"))
				currD = "E";
			else if (currD.equals("S") && instructions[i].equals("L"))
				currD = "E";
			else if (currD.equals("S") && instructions[i].equals("R"))
				currD = "W";
		}
		
		output.delete(0, output.length());
		output.append(currX + "-" + currY + "-" + currD);
		System.out.println(output);
	}
	
	return output.toString();
	
	*/
	
	//LIS
/*static int lis2(int[] ar){
        TreeSet<Integer> set = new TreeSet<Integer>();
        for (int i=0; i<ar.length; i++) {
            Integer ceil = set.ceiling(ar[i]);
            if(ceil == null)     //if ceil not present this simply extends the current sequence
                set.add(ar[i]);
            else{                   //replace ceil with this value
                set.remove(ceil);
                set.add(ar[i]);
            }
        }
        return set.size();
    }*/
	
	/*public static void permutation(String prefix, String str)//"","123"
	{
		
	    int n = str.length();
	    if (n == 0) { 
	    	
	    	System.out.println(prefix);
	    	
	    }
	    else {
	        for (int i = 0; i < n; i++)
	            permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n));
	    }
	}*/

	
	/*public static String toggleString(String sentence) {
	    StringBuilder toggled = new StringBuilder(sentence.length());
	    for (char letter : sentence.toCharArray()) {
	        if(Character.isUpperCase(letter)) {
	            letter = Character.toLowerCase(letter);
	        } else if(Character.isLowerCase(letter)) {
	            letter = Character.toUpperCase(letter);
	        }

	        toggled.append(letter);

	    }
	    return toggled.toString();
	}*/
